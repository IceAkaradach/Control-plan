<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Control Plan App</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Use Inter font from Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 1200px;
        }
        .tab-button {
            transition: all 0.3s ease;
        }
        th, td {
            white-space: nowrap;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4 sm:p-6">

    <div class="container bg-white rounded-2xl shadow-xl p-6 sm:p-8 w-full max-w-6xl">
        <h1 class="text-3xl sm:text-4xl font-bold text-center text-gray-800 mb-6">
            เว็บแอปพลิเคชัน Control Plan
        </h1>
        <p class="text-center text-gray-500 mb-8">
            บันทึกและดูข้อมูล Control Plan ตามระบบ IATF
        </p>

        <!-- Tab Navigation -->
        <div class="flex border-b border-gray-200 mb-8">
            <button id="record-tab" class="tab-button flex-1 py-3 px-4 sm:px-6 text-lg font-medium text-center text-indigo-600 border-b-2 border-indigo-600 focus:outline-none">
                บันทึกข้อมูล
            </button>
            <button id="view-tab" class="tab-button flex-1 py-3 px-4 sm:px-6 text-lg font-medium text-center text-gray-500 border-b-2 border-transparent focus:outline-none hover:text-gray-700 hover:border-gray-400">
                ดูข้อมูล
            </button>
        </div>

        <!-- Content Area -->
        <div id="record-content" class="tab-content">
            <!-- Data Entry Form -->
            <form id="data-form" class="space-y-6">
                <!-- Main Process Info -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div>
                        <label for="no" class="block text-sm font-medium text-gray-700">ลำดับ (NO.)</label>
                        <input type="text" id="no" name="no" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                    </div>
                    <div>
                        <label for="process-name" class="block text-sm font-medium text-gray-700">ชื่อกระบวนการ (PROCESS NAME)</label>
                        <select id="process-name" name="process-name" required
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border bg-white">
                            <option value="">เลือกชื่อกระบวนการ...</option>
                        </select>
                    </div>
                    <div>
                        <label for="machine" class="block text-sm font-medium text-gray-700">เครื่องจักร/อุปกรณ์ (MACHINE, DEVICE, JIG)</label>
                        <input type="text" id="machine" name="machine" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                    </div>
                    <div>
                        <label for="person-in-charge" class="block text-sm font-medium text-gray-700">ผู้รับผิดชอบ (PERSON IN CHARGE)</label>
                        <input type="text" id="person-in-charge" name="person-in-charge" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                    </div>
                </div>

                <hr class="my-6 border-gray-300">

                <!-- Characteristics Section -->
                <div id="characteristics-container" class="space-y-6">
                    <!-- Dynamic characteristic rows will be added here -->
                    <div id="characteristic-template" class="border p-4 rounded-lg bg-gray-50 space-y-4">
                        <h3 class="text-lg font-semibold text-gray-800">คุณลักษณะ #1</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            <div>
                                <label for="process-char-1" class="block text-sm font-medium text-gray-700">คุณลักษณะกระบวนการ (PROCESS CHARACTERISTICS)</label>
                                <select id="process-char-1" name="process-char"
                                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border bg-white">
                                    <option value="">เลือกคุณลักษณะกระบวนการ...</option>
                                </select>
                            </div>
                            <div>
                                <label for="product-char-1" class="block text-sm font-medium text-gray-700">คุณลักษณะผลิตภัณฑ์ (PRODUCT CHARACTERISTICS)</label>
                                <select id="product-char-1" name="product-char"
                                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border bg-white">
                                    <option value="">เลือกคุณลักษณะผลิตภัณฑ์...</option>
                                </select>
                            </div>
                            <div>
                                <label for="special-char-symbol-1" class="block text-sm font-medium text-gray-700">สัญลักษณ์คุณลักษณะพิเศษ (Special characteristic symbol)</label>
                                <input type="text" id="special-char-symbol-1" name="special-char-symbol"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                            </div>
                            <div>
                                <label for="on-drawing-1" class="block text-sm font-medium text-gray-700">อ้างอิงแบบ (ON DRAWING)</label>
                                <input type="text" id="on-drawing-1" name="on-drawing"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                            </div>
                            <div>
                                <label for="process-product-spec-1" class="block text-sm font-medium text-gray-700">ข้อกำหนดกระบวนการ/ผลิตภัณฑ์ (PROCESS PRODUCT SPECIFICATION)</label>
                                <input type="text" id="process-product-spec-1" name="process-product-spec" required
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                            </div>
                            <div>
                                <label for="sample-size-frequency-1" class="block text-sm font-medium text-gray-700">ขนาดตัวอย่าง/ความถี่ (SAMPLE SIZE /FREQUENCY)</label>
                                <input type="text" id="sample-size-frequency-1" name="sample-size-frequency" required
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                            </div>
                            <div>
                                <label for="measuring-instruments-1" class="block text-sm font-medium text-gray-700">เครื่องมือวัด/วิธีการ (MEASURING INSTRUMENTS/METHODS)</label>
                                <input type="text" id="measuring-instruments-1" name="measuring-instruments" required
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                            </div>
                            <div>
                                <label for="notes-1" class="block text-sm font-medium text-gray-700">หมายเหตุ (NOTES)</label>
                                <input type="text" id="notes-1" name="notes"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                            </div>
                            <div>
                                <label for="analysis-methods-1" class="block text-sm font-medium text-gray-700">วิธีการวิเคราะห์ (ANALYSIS METHODS)</label>
                                <input type="text" id="analysis-methods-1" name="analysis-methods"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                            </div>
                        </div>
                    </div>
                </div>

                <button type="button" id="add-characteristic" class="w-full sm:w-auto mt-4 px-6 py-2 border border-dashed border-gray-400 text-gray-600 rounded-md hover:bg-gray-200 transition duration-200 ease-in-out">
                    เพิ่มคุณลักษณะ
                </button>

                <div class="text-center mt-8">
                    <button type="submit" class="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition duration-300 ease-in-out transform hover:scale-105">
                        บันทึกข้อมูล
                    </button>
                </div>
                <div id="status-message" class="mt-4 text-center font-medium"></div>
            </form>
        </div>

        <div id="view-content" class="tab-content hidden">
            <!-- Data Display Area -->
            <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">ข้อมูล Control Plan</h2>
            <div class="overflow-x-auto rounded-lg shadow-md">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">NO.</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PROCESS NAME</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">MACHINE, DEVICE, JIG</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PROCESS CHARACTERISTICS</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PRODUCT CHARACTERISTICS</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SPECIAL CHAR. SYMBOL</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ON DRAWING</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PERSON IN CHARGE</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">PROCESS PRODUCT SPEC.</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SAMPLE SIZE /FREQUENCY</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">MEASURING INSTRUMENTS</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">NOTES</th>
                            <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ANALYSIS METHODS</th>
                        </tr>
                    </thead>
                    <tbody id="control-plan-table-body" class="bg-white divide-y divide-gray-200">
                        <!-- Data will be inserted here by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div id="loading-indicator" class="text-center mt-4 hidden">
                <span class="text-indigo-600 font-semibold">กำลังโหลดข้อมูล...</span>
            </div>
            <div id="data-message" class="text-center mt-4 font-medium text-gray-500 hidden">
                ไม่พบข้อมูล
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const recordTab = document.getElementById('record-tab');
            const viewTab = document.getElementById('view-tab');
            const recordContent = document.getElementById('record-content');
            const viewContent = document.getElementById('view-content');
            const dataForm = document.getElementById('data-form');
            const statusMessage = document.getElementById('status-message');
            const controlPlanTableBody = document.getElementById('control-plan-table-body');
            const loadingIndicator = document.getElementById('loading-indicator');
            const dataMessage = document.getElementById('data-message');
            const processNameDropdown = document.getElementById('process-name');
            const noInput = document.getElementById('no');
            
            const addCharacteristicBtn = document.getElementById('add-characteristic');
            const characteristicsContainer = document.getElementById('characteristics-container');
            const characteristicTemplate = document.getElementById('characteristic-template');

            let allSheetData = [];
            let processToNoMap = new Map(); // Map to store process name to NO.
            let noToProcessMap = new Map(); // Map to store NO. to process name
            let characteristicCounter = 1;
            
            // Hide the template from initial view
            characteristicTemplate.style.display = 'block';
            characteristicTemplate.remove();

            // --- Google Sheets & Apps Script Configuration ---
            // สิ่งสำคัญ:
            // 1. คัดลอกโค้ดจากไฟล์ 'Code.gs'
            // 2. ไปที่ Google Sheet ของคุณ > เมนู ส่วนขยาย (Extensions) > Apps Script
            // 3. วางโค้ด 'Code.gs' ลงใน editor แล้วบันทึกโปรเจกต์
            // 4. ใน Apps Script editor, คลิก 'Deploy' > 'New deployment'.
            // 5. เลือกประเภท 'Web app', ตั้งค่า 'Execute as' เป็น 'Me', และ 'Who has access' เป็น 'Anyone'.
            // 6. คลิก 'Deploy' แล้วคัดลอก 'Web app URL' ที่ได้
            // 7. วาง URL นั้นที่นี่:
            const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbySAbkMKbZ6RzmgdpjDagkZgsuoSjFn4b3JHmd3rhHuy6juKL1TzyTFHzuVJZapww/exec';
            const SPREADSHEET_ID = '1D8KaFDWlF_7BD16E49DHmDj6jSrlD8ehg8TU3hsjKgk';

            // Function to fetch all data from Apps Script on page load
            async function fetchAllData() {
                try {
                    const response = await fetch(APPS_SCRIPT_URL + '?action=getData');
                    const result = await response.json();
                    
                    if (result.success) {
                        // Assuming the Apps Script returns data in the same format as the old API
                        allSheetData = result.data.map(obj => Object.values(obj));
                        if (allSheetData.length > 0) {
                            // Populate the maps for process name to NO. and vice versa
                            processToNoMap.clear();
                            noToProcessMap.clear();
                            allSheetData.forEach(row => {
                                const processName = row[1];
                                const no = row[0];
                                if (processName && no) {
                                    if (!processToNoMap.has(processName)) {
                                        processToNoMap.set(processName, no);
                                    }
                                    if (!noToProcessMap.has(no)) {
                                        noToProcessMap.set(no, processName);
                                    }
                                }
                            });
                            populateProcessNameDropdown();
                        }
                    } else {
                        throw new Error(result.error);
                    }
                } catch (error) {
                    console.error('Error fetching data from Apps Script:', error);
                    statusMessage.textContent = 'เกิดข้อผิดพลาดในการดึงข้อมูล: กรุณาตรวจสอบการตั้งค่า App Script และ URL';
                    statusMessage.classList.remove('text-green-600', 'text-gray-500');
                    statusMessage.classList.add('text-red-600');
                }
            }

            // Populate the Process Name dropdown with unique values
            function populateProcessNameDropdown() {
                const uniqueProcessNames = [...new Set(allSheetData.map(row => row[1]).filter(name => name))];
                processNameDropdown.innerHTML = '<option value="">เลือกชื่อกระบวนการ...</option>';
                uniqueProcessNames.forEach(name => {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    processNameDropdown.appendChild(option);
                });
            }

            // Function to populate characteristic dropdowns based on selected Process Name
            function populateCharacteristicDropdowns(processName) {
                const processCharDropdowns = document.querySelectorAll('[name^="process-char"]');
                const productCharDropdowns = document.querySelectorAll('[name^="product-char"]');

                const filteredData = allSheetData.filter(row => row[1] === processName);
                
                const uniqueProcessChars = [...new Set(filteredData.map(row => row[3]).filter(char => char))];
                const uniqueProductChars = [...new Set(filteredData.map(row => row[4]).filter(char => char))];

                processCharDropdowns.forEach(dropdown => {
                    dropdown.innerHTML = '<option value="">เลือกคุณลักษณะกระบวนการ...</option>';
                    uniqueProcessChars.forEach(char => {
                        const option = document.createElement('option');
                        option.value = char;
                        option.textContent = char;
                        dropdown.appendChild(option);
                    });
                });

                productCharDropdowns.forEach(dropdown => {
                    dropdown.innerHTML = '<option value="">เลือกคุณลักษณะผลิตภัณฑ์...</option>';
                    uniqueProductChars.forEach(char => {
                        const option = document.createElement('option');
                        option.value = char;
                        option.textContent = char;
                        dropdown.appendChild(option);
                    });
                });
            }

            // Event listener for Process Name dropdown change
            processNameDropdown.addEventListener('change', (e) => {
                const selectedProcessName = e.target.value;
                if (selectedProcessName) {
                    // Automatically fill the NO. field based on the selected process name
                    const no = processToNoMap.get(selectedProcessName);
                    if (no) {
                        noInput.value = no;
                    }
                    populateCharacteristicDropdowns(selectedProcessName);
                } else {
                    noInput.value = ''; // Clear NO. field if no process is selected
                    document.querySelectorAll('[name^="process-char"]').forEach(d => d.innerHTML = '<option value="">เลือกคุณลักษณะกระบวนการ...</option>');
                    document.querySelectorAll('[name^="product-char"]').forEach(d => d.innerHTML = '<option value="">เลือกคุณลักษณะผลิตภัณฑ์...</option>');
                }
            });

            // New: Event listener for NO. input change
            noInput.addEventListener('input', (e) => {
                const selectedNo = e.target.value;
                const processName = noToProcessMap.get(selectedNo);
                if (processName) {
                    processNameDropdown.value = processName;
                    populateCharacteristicDropdowns(processName);
                } else {
                    processNameDropdown.value = '';
                    document.querySelectorAll('[name^="process-char"]').forEach(d => d.innerHTML = '<option value="">เลือกคุณลักษณะกระบวนการ...</option>');
                    document.querySelectorAll('[name^="product-char"]').forEach(d => d.innerHTML = '<option value="">เลือกคุณลักษณะผลิตภัณฑ์...</option>');
                }
            });

            // Function to switch tabs
            function switchTab(activeTab, inactiveTab, activeContent, inactiveContent) {
                activeTab.classList.remove('text-gray-500', 'border-transparent', 'hover:text-gray-700', 'hover:border-gray-400');
                activeTab.classList.add('text-indigo-600', 'border-indigo-600');
                inactiveTab.classList.remove('text-indigo-600', 'border-indigo-600');
                inactiveTab.classList.add('text-gray-500', 'border-transparent', 'hover:text-gray-700', 'hover:border-gray-400');
                activeContent.classList.remove('hidden');
                inactiveContent.classList.add('hidden');
            }

            // Tab event listeners
            recordTab.addEventListener('click', () => {
                switchTab(recordTab, viewTab, recordContent, viewContent);
            });

            viewTab.addEventListener('click', () => {
                switchTab(viewTab, recordTab, viewContent, recordContent);
                fetchDataFromSheet();
            });

            // Function to add a new characteristic row
            function addCharacteristicRow() {
                characteristicCounter++;
                const newCharacteristicRow = characteristicTemplate.cloneNode(true);
                newCharacteristicRow.style.display = 'block'; // Ensure it's visible
                newCharacteristicRow.querySelector('h3').textContent = `คุณลักษณะ #${characteristicCounter}`;

                // Update input names and IDs to be unique
                const selects = newCharacteristicRow.querySelectorAll('select, input');
                selects.forEach(select => {
                    select.name = `${select.name.replace(/-\d+$/, '')}-${characteristicCounter}`;
                    select.id = `${select.id.replace(/-\d+$/, '')}-${characteristicCounter}`;
                    select.value = ''; // Clear values
                });
                characteristicsContainer.appendChild(newCharacteristicRow);
                
                // Re-populate dropdowns for the new row
                const selectedProcessName = processNameDropdown.value;
                if (selectedProcessName) {
                    populateCharacteristicDropdowns(selectedProcessName);
                }
            }

            // Add initial characteristic row on page load
            addCharacteristicRow();

            // Event listener for adding new rows
            addCharacteristicBtn.addEventListener('click', addCharacteristicRow);

            // Handle form submission
            dataForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                statusMessage.textContent = 'กำลังบันทึกข้อมูล...';
                statusMessage.classList.add('text-gray-500');
                statusMessage.classList.remove('text-green-600', 'text-red-600');

                // Get header values once
                const no = document.getElementById('no').value;
                const processName = processNameDropdown.value;
                const machine = document.getElementById('machine').value;
                const personInCharge = document.getElementById('person-in-charge').value;

                const characteristicRows = characteristicsContainer.querySelectorAll('.border.p-4.rounded-lg.bg-gray-50');
                const allRowsToSubmit = [];

                characteristicRows.forEach(row => {
                    const processChar = row.querySelector('[name^="process-char"]').value;
                    const productChar = row.querySelector('[name^="product-char"]').value;
                    const specialCharSymbol = row.querySelector('[name^="special-char-symbol"]').value;
                    const onDrawing = row.querySelector('[name^="on-drawing"]').value;
                    const processProductSpec = row.querySelector('[name^="process-product-spec"]').value;
                    const sampleSizeFrequency = row.querySelector('[name^="sample-size-frequency"]').value;
                    const measuringInstruments = row.querySelector('[name^="measuring-instruments"]').value;
                    const notes = row.querySelector('[name^="notes"]').value;
                    const analysisMethods = row.querySelector('[name^="analysis-methods"]').value;

                    const rowValues = [
                        no,
                        processName,
                        machine,
                        processChar,
                        productChar,
                        specialCharSymbol,
                        onDrawing,
                        personInCharge,
                        processProductSpec,
                        sampleSizeFrequency,
                        measuringInstruments,
                        notes,
                        analysisMethods
                    ];
                    allRowsToSubmit.push(rowValues);
                });

                try {
                    const response = await fetch(APPS_SCRIPT_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ values: allRowsToSubmit })
                    });
                    const result = await response.json();

                    if (result.success) {
                        statusMessage.textContent = 'บันทึกข้อมูลเรียบร้อยแล้ว!';
                        statusMessage.classList.remove('text-gray-500', 'text-red-600');
                        statusMessage.classList.add('text-green-600');
                        
                        // Reset form by clearing main fields and removing extra characteristic rows
                        noInput.value = '';
                        document.getElementById('machine').value = '';
                        document.getElementById('person-in-charge').value = '';
                        processNameDropdown.value = '';
                        characteristicsContainer.innerHTML = '';
                        characteristicCounter = 0;
                        addCharacteristicRow();
                        populateProcessNameDropdown();

                    } else {
                        throw new Error('การบันทึกข้อมูลล้มเหลว: ' + JSON.stringify(result));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    statusMessage.textContent = 'เกิดข้อผิดพลาดในการบันทึกข้อมูล! โปรดตรวจสอบ URL ของ App Script';
                    statusMessage.classList.remove('text-gray-500', 'text-green-600');
                    statusMessage.classList.add('text-red-600');
                }
            });

            // Function to fetch and display data from Google Sheets
            async function fetchDataFromSheet() {
                loadingIndicator.classList.remove('hidden');
                controlPlanTableBody.innerHTML = '';
                dataMessage.classList.add('hidden');
                
                try {
                    const response = await fetch(APPS_SCRIPT_URL + '?action=getData');
                    const result = await response.json();
                    
                    if (result.success) {
                        const dataToDisplay = result.data.map(obj => Object.values(obj));

                        if (dataToDisplay && dataToDisplay.length > 0) {
                            dataToDisplay.forEach(row => {
                                const tr = document.createElement('tr');
                                tr.classList.add('hover:bg-gray-50', 'transition-colors');
                                // Add each cell from the row to the table
                                row.forEach(cell => {
                                    const td = document.createElement('td');
                                    td.classList.add('px-3', 'py-4', 'whitespace-nowrap', 'text-sm', 'text-gray-500');
                                    td.textContent = cell;
                                    tr.appendChild(td);
                                });
                                controlPlanTableBody.appendChild(tr);
                            });
                            controlPlanTableBody.parentElement.classList.remove('hidden');
                        } else {
                            dataMessage.textContent = 'ไม่พบข้อมูล';
                            dataMessage.classList.remove('hidden');
                        }
                    } else {
                        throw new Error(result.error);
                    }
                } catch (error) {
                    console.error('Error fetching data:', error);
                    dataMessage.textContent = 'เกิดข้อผิดพลาดในการดึงข้อมูลจาก Google Sheets';
                    dataMessage.classList.remove('hidden');
                }
                loadingIndicator.classList.add('hidden');
            }
            
            // Initial data fetch on page load
            fetchAllData();
        });
    </script>
</body>
</html>
